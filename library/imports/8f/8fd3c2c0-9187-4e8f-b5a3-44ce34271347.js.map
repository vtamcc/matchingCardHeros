{"version":3,"sources":["assets/MatchingCardHeros/scripts/game/CardHero.GameView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport { Global } from \"../CardHero.Global\";\nimport Card from \"./CardHero.Card\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameView extends cc.Component {\n   public static instance: GameView = null;\n   @property(cc.Prefab)\n   prfCard: cc.Prefab = null;\n   @property(cc.SpriteFrame)\n   listSpfCards: cc.SpriteFrame[] = [];\n   @property(cc.Node)\n   nTableCards: cc.Node = null;\n\n   @property(cc.Label)\n   lbHpChar: cc.Label = null;\n   @property(cc.Label)\n   lbHpBagGuy: cc.Label = null;\n\n   listIdCard = [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12];\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        GameView.instance = this;\n        this.listIdCard = this.shuffleArray(this.listIdCard);\n        this.scheduleOnce(() => {\n            this.loadCards();\n        },1)\n       \n        this.updateHpChar();\n        this.updateHpBagGuy();\n    }\n\n\n    loadCards() {\n        for(let i = 0; i < 25; i++) {\n            let card = cc.instantiate(this.prfCard).getComponent(Card)\n            card.setData(this.listIdCard[i])\n            this.nTableCards.addChild(card.node);\n        }\n    }\n\n    shuffleArray(array: number[]): number[] {\n        for (let i = array.length-1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    start () {\n\n    }\n\n    updateHpChar() {\n        this.lbHpChar.string = Global.hpChar + ' ';\n    }\n\n    updateHpBagGuy() {\n        this.lbHpBagGuy.string = Global.hpBagGuy + ' ';\n    }\n\n\n    // update (dt) {}\n}\n"]}